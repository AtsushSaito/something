import Mathlib.Topology.Basic
import Mathlib.LinearAlgebra.Basis.VectorSpace
import Mathlib.LinearAlgebra.FiniteDimensional
import Mathlib.Algebra.Module.Basic

/-!
# Toric Geometry

This file contains basic definitions from toric geometry, including fans, cones,
and basic properties needed for toric varieties.
-/

namespace ToricGeometry

/-- A `Cone` is a convex polyhedral cone in a vector space. -/
structure Cone (V : Type) [AddCommGroup V] [Module ℝ V] where
  /-- The set representing the cone -/
  carrier : Set V
  /-- The cone is convex -/
  convex : ∀ x y : V, x ∈ carrier → y ∈ carrier → ∀ r s : ℝ, r ≥ 0 → s ≥ 0 → r • x + s • y ∈ carrier
  /-- The cone is polyhedral (generated by finitely many vectors) -/
  polyhedral : ∃ (n : Nat) (generators : Fin n → V), carrier = {v | ∃ cs : Fin n → ℝ, (∀ i, cs i ≥ 0) ∧ v = ∑ i, cs i • generators i}

/-- A cone is `Rational` if it is generated by lattice points. -/
def Cone.IsRational (N : Type) [AddCommGroup N] [Module ℤ N] (σ : Cone (N ⊗ ℝ)) : Prop :=
  ∃ (n : Nat) (generators : Fin n → N), σ.carrier = {v | ∃ cs : Fin n → ℝ, (∀ i, cs i ≥ 0) ∧ v = ∑ i, cs i • (generators i ⊗ₜ (1 : ℝ))}

/-- A cone is `Smooth` if it is generated by a subset of a basis of the lattice. -/
def Cone.IsSmooth (N : Type) [AddCommGroup N] [Module ℤ N] (σ : Cone (N ⊗ ℝ)) : Prop :=
  ∃ (n : Nat) (generators : Fin n → N),
    σ.carrier = {v | ∃ cs : Fin n → ℝ, (∀ i, cs i ≥ 0) ∧ v = ∑ i, cs i • (generators i ⊗ₜ (1 : ℝ))} ∧
    ∃ (basis : Basis (Fin n) ℤ N), ∀ i, generators i = basis i

/-- A face of a cone -/
def IsFace (τ σ : Cone (N ⊗ ℝ)) : Prop :=
  ∃ (u : (N ⊗ ℝ) →ₗ[ℝ] ℝ), τ.carrier = {v ∈ σ.carrier | u v = 0} ∧ ∀ v ∈ σ.carrier, u v ≥ 0

/-- A `Fan` is a collection of cones that fit together nicely. -/
structure Fan (N : Type) [AddCommGroup N] [Module ℤ N] where
  /-- The set of cones in the fan -/
  cones : Set (Cone (N ⊗ ℝ))
  /-- Each cone in the fan is rational -/
  rational : ∀ σ ∈ cones, σ.IsRational N
  /-- The fan is closed under taking faces -/
  face_closed : ∀ σ ∈ cones, ∀ τ, IsFace τ σ → τ ∈ cones
  /-- The intersection of any two cones in the fan is a face of each -/
  intersection : ∀ σ ∈ cones, ∀ τ ∈ cones, ∃ ρ ∈ cones, ρ.carrier = σ.carrier ∩ τ.carrier ∧ IsFace ρ σ ∧ IsFace ρ τ

/-- A fan is `Complete` if its support is the entire space. -/
def Fan.IsComplete {N : Type} [AddCommGroup N] [Module ℤ N] (Σ : Fan N) : Prop :=
  ∀ v : N ⊗ ℝ, ∃ σ ∈ Σ.cones, v ∈ σ.carrier

/-- A fan is `Smooth` if every cone in it is smooth. -/
def Fan.IsSmooth {N : Type} [AddCommGroup N] [Module ℤ N] (Σ : Fan N) : Prop :=
  ∀ σ ∈ Σ.cones, σ.IsSmooth N

/-- A `Refinement` of a fan is a subdivision that doesn't change the support. -/
structure Refinement {N : Type} [AddCommGroup N] [Module ℤ N] (Σ Σ' : Fan N) where
  /-- The support is preserved -/
  support_preserved : ∀ σ ∈ Σ.cones, ∃ σs : Set (Cone (N ⊗ ℝ)), σs ⊆ Σ'.cones ∧ σ.carrier = ⋃ τ ∈ σs, τ.carrier
  /-- Each cone in Σ' is contained in some cone in Σ -/
  cones_contained : ∀ σ' ∈ Σ'.cones, ∃ σ ∈ Σ.cones, σ'.carrier ⊆ σ.carrier

/-- The main theorem: every fan admits a smooth refinement -/
theorem exists_smooth_refinement {N : Type} [AddCommGroup N] [Module ℤ N] [FiniteDimensional ℤ N]
    (Σ : Fan N) : ∃ Σ' : Fan N, Refinement Σ Σ' ∧ Σ'.IsSmooth :=
  sorry -- This is a key part of the resolution of toric singularities proof

end ToricGeometry
